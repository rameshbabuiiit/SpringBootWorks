package com.lmo.springboot.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lmo.springboot.dao.DaoService;
import com.lmo.springboot.dao.RepoService;
import com.lmo.springboot.exception.NoDataFoundException;
import com.lmo.springboot.model.User;

@RestController
@RequestMapping(value = "/users")
public class UserController {
	@Autowired
	DaoService daoServ;

	@Autowired
	RepoService repServ;



	@GetMapping("/{userid}")
	public ResponseEntity<Object> getUsers(@PathVariable long userid) {
		Optional<User> user = repServ.getUser(userid);
		if (!user.isPresent()) {
			throw new NoDataFoundException();
		}
		return new ResponseEntity<Object>(user, HttpStatus.OK);
	}

	@GetMapping
	public ResponseEntity<Object> getUsersByName(@RequestParam("userName") String userName) {
		Optional<User> user = repServ.getUserByEmpname(userName);
		if (!user.isPresent()) {
			throw new NoDataFoundException();
		}
		return new ResponseEntity<Object>(user, HttpStatus.OK);

	}

	@GetMapping
	public ResponseEntity<Object> getUsers() {
		List<User> usersList = repServ.getUsers();
		if (usersList == null || usersList.isEmpty()) {
			throw new NoDataFoundException();
		}
		else
			return new ResponseEntity<Object>(usersList, HttpStatus.OK);
	}

	@PostMapping
	public ResponseEntity<User> postUser(@Valid @RequestBody User user) {
		// long id = daoServ.insert(user);
		repServ.insert(user);
		return new ResponseEntity<User>(HttpStatus.CREATED);

	}

}
